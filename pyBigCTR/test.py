import numpy as np
import matplotlib.pyplot as plt
import basicFun as Bf
import seaborn as sns

import time


def fillblog():
    text = open('sortnum.txt', 'r').readlines()
    # data=[[0]*3]*4
    # amax = 50
    for i in range(6):
        lct = text[i * 13][:2]
        print(lct)
        plt.figure(figsize=[4.0, 10.0])
        for j in range(12):
            a = text[i * 13 + j + 1].split()
            r, g, b, y = int(a[0]), int(a[1]), int(a[2]), int(a[3])
            amax = max(r, g, b)
            plt.subplot(3, 1, 1)
            plt.scatter(j % 4, int(j / 4), c=[r / amax, 0, 0], s=2000, marker='s')
            plt.ylim(-0.6, 2.6)
            plt.subplot(3, 1, 2)
            plt.scatter(j % 4, int(j / 4), c=[0, g / amax, 0], s=2000, marker='s')
            plt.ylim(-0.6, 2.6)
            plt.subplot(3, 1, 3)
            plt.scatter(j % 4, int(j / 4), c=[0, 0, b / amax], s=2000, marker='s')
            plt.ylim(-0.6, 2.6)
        plt.xticks(range(4), area)
        plt.yticks(range(3), season)
        plt.ylim(-0.6, 2.6)
        # plt.title(LT)
        plt.savefig(lct + '.png')
        # plt.show()


def static_d2():
    res = {'mlat': [], 'den_d2': []}
    with open('D:/Program/BigCTR/Text/den_d2_mlat.txt', 'r') as f:
        text = f.readlines()
        for s in text:
            print(s)
            a = s.split()
            res[a[0]] = res[a[0]] + [float(x) for x in a[2:]]
    # plt.scatter(res['mlat'], res['den_d2'], s=3, alpha=0.1)
    # plt.show()
    sns.distplot(res['den_d2'], bins=1000)
    plt.show()


def static_hmf2(location):
    lons = [-76.87, -45.0]
    file_names = ['JI91J.txt', 'CAJ2M.TXT']
    if location == 'Jicamarca':
        loc = 0
    elif location == 'Cachoeira_Paulista':
        loc = 1
    else:
        loc = -1
        print('Location Error')

    file_name = 'D:/SpaceScienceData/Digisonde/hmf2/' + file_names[loc]
    time_line = []
    hmf2s = []
    with open(file_name) as f:
        texts = f.readlines()
        for text in texts:
            print(text)
            date, doy, clock, cc, f0f2, hmf2 = text.split()
            if hmf2 != '---':
                # year, month, day = [int(x) for x in date.split('.')]
                # doy = int(doy[1:-1])
                hh, mm, ss = [int(x) for x in clock.split(':')]
                # hmF2 = float(hmf2)
                ut = hh + mm / 60 + ss / 3600
                lct = (ut + lons[loc] / 15) % 24

                if 19.5 < lct < 20.5:
                    uts = str(hh).zfill(2) + ':' + str(mm).zfill(2) + ':' + str(ss).zfill(2)
                    timestamp = time.mktime(time.strptime(date + ' ' + uts, "%Y.%m.%d %H:%M:%S"))

                    time_line.append(timestamp)
                    hmf2s.append(hmf2)
    plt.scatter(time_line, hmf2s, s=5)
    plt.show()


def fit_curve():
    from scipy.optimize import curve_fit
    x = [1.3188, 5.397, 5.5609, 1.5161, 3.4449, 3.0419, 2.5284, 2.2811, 2.4741, 1.1425, 2.729, 2.0496, 1.6585, 1.6357,
         1, 1.4565, 1.5189, 1.6962, 1.4225, 2.7678, 3.6379, 2.1252, 2.8787, 1.8189, 1.498, 2.7498, 2.0249, 3.4992,
         3.8104, 2.1366, 2.2518, 1.3534, 1.7863, 1.6412, 5.8483, 5.0237, 2.4948, 1.6986, 2.3434, 1.7506, 4.5821, 5.7164,
         1.2597, 1.4592, 1.3598, 2.3008, 3.0709, 1.4668, 2.2642, 3.5965, 2.5035, 1.9142, 3.0689, 5.2084, 3.6024, 3.69,
         1.8168, 3.2288, 5.7401, 18.5222, 18.1988, 470.8285, 220.2128, 238.961, 15.5978, 42.4694, 50.9162, 50.4442,
         7.5322, 8.9222, 12.668, 114.3948, 43.9377, 6.6224, 805.0847, 908.4881, 798.0296, 834.4828, 217.6966, 64.2361,
         50.7868, 1169.2015, 36.0606, 61.1782, 41.4439, 10.0414, 16.3318, 8.7289, 20.9946, 9.6322, 13.5172, 17.2962,
         18.6548, 137.4294, 845.9658, 31.913, 70.8861, 188.8889, 52.5773, 56.6021, 553.4506, 190.0474, 39.4357, 27.8105,
         102.8047, 233.712, 6.3821, 9.9052, 293.0423, 8.3122, 9.8142, 228.4538, 1054.5506, 284.8952, 25.4142, 104.0339,
         25.3512, 15.4001, 11.5088, 19.5884, 8.5635, 352.3598]
    y = [1.1, 1.7, 1.2, 1.2, 2.6, 3.0, 1.2, 1.3, 0.9, 1.0, 2.0, 1.5, 1.0, 0.9, 1.0, 1.1, 0.9, 1.1, 0.7, 1.6, 1.2, 0.9,
         1.2, 0.9, 1.0, 1.1, 1.1, 1.4, 2.4, 1.1, 1.3, 1.0, 1.1, 0.8, 1.7, 1.9, 1.1, 1.2, 0.9, 0.9, 1.7, 1.4, 1.0, 0.9,
         1.2, 1.7, 1.6, 0.8, 0.7, 1.6, 1.5, 0.6, 0.9, 1.7, 0.7, 2.2, 0.5, 0.9, 1.5, 6.3, 5.4, 73.5, 36.4, 26.9, 5.7,
         6.2, 14.0, 4.8, 2.2, 1.6, 5.5, 11.2, 15.0, 2.0, 59.0, 140.6, 222.8, 321.0, 35.9, 10.6, 11.2, 224.0, 9.0, 7.7,
         10.4, 2.9, 4.6, 3.3, 7.7, 2.8, 3.3, 4.9, 4.4, 10.5, 168.9, 6.7, 7.1, 37.1, 12.3, 12.6, 65.7, 31.1, 11.3, 5.2,
         63.1, 71.6, 1.7, 1.4, 38.4, 1.7, 3.2, 26.9, 89.9, 30.6, 4.6, 19.2, 13.7, 3.3, 3.5, 4.7, 1.2, 209.8]

    x = [np.log10(z) for z in x]
    y = [np.log10(z) for z in y]

    def func(z, aa, bb):
        return aa * z + bb

    popt, pcov = curve_fit(func, x, y)
    a = popt[0]  # popt里面是拟合系数，读者可以自己help其用法
    b = popt[1]

    print(a, b)
    yvals = [a * z + b for z in x]
    plt.plot(x, y, '*', c='k', label='original values')
    plt.scatter(x, yvals, c='r', label='curve_fit values')
    yvals = [1 * z + np.log10(0.4) for z in x]
    plt.scatter(x, yvals, c='b', label='guess values')
    plt.show()


def champ_filter():
    for lt in range(18, 24):
        with open('D:/Program/BigCTR/Text/champOrb/' + str(lt * 1.0) + '.txt', 'r') as f:
            text = f.readlines()
        temp_line = 0
        while temp_line < len(text):

            cha, temp_line = Bf.get_one_orb(text, temp_line)
            mlat, den = cha.mlat_den()
            # den = [10**x for x in den]
            try:
                if len(mlat) > 80:
                    plt.figure(figsize=[10, 10], dpi=75)
                    title = cha.date + '_' + str(round(cha.midlt, 2)) + '_' + str(round(cha.midlon, 2))
                    plt.subplot(2, 1, 1)
                    plt.title(title)
                    plt.scatter(mlat, den, c='k')
                    # [b, a] = signal.butter(16, 0.4, 'low')
                    # filtedData = signal.filtfilt(b, a, den)
                    # filtedData = signal.medfilt(den, 3)
                    # filtedData = (np.array([den[0]]+den[:-1])+np.array(den[1:]+[den[-1]])+np.array(den))/3
                    filted_data = (np.array([den[0]] + den[:-1]) + np.array(den[1:] + [den[-1]])) / 2
                    plt.plot(mlat, filted_data, linestyle='--', c='r')
                    # [b, a] = signal.butter(16, 0.4, 'high')
                    # filtedData = signal.filtfilt(b, a, den)  # data为要过滤的信号
                    filted_data = den - filted_data
                    plt.subplot(2, 1, 2)
                    filted_data = [abs(x) for x in filted_data]
                    # plt.plot(mlat, filtedData)
                    plt.bar(mlat, filted_data)
                    plt.plot(mlat, np.ones(len(mlat)) * 0.1, c='grey')
                    plt.ylim([0, 0.3])
                    # maxfl = max(filted_data)
                    bubble_count = sum([x > 0.1 for x in filted_data])
                    # for i in range(8):
                    #     plt.plot(mlat, i*10000*np.ones(len(mlat)), c='grey')
                    # plt.show()
                    plt.savefig('D:/Program/BigCTR/Picture/champPrfFilter2/' + str(lt) + '/'
                                + str(bubble_count) + '_' + title + '.png')
                    plt.close()
            except:
                print(temp_line, lt)


def static_cosmic_hmf2():
    res = {'days': [], 'lon': [], 'hmf2': [], 'doy': [], 'den': [], 'lct': []}
    outtexts = []
    with open('D:/Program/BigCTR/Text/cosmicOcc/cosmic_magequ.txt', 'r') as f:
        texts = f.readlines()
    for text in texts:
        yy, mm, dd, gps_time, lct, hmf2, lat, lon, den = [float(x) for x in text.split()]
        print(yy, mm, dd)
        doy = Bf.orderday(str(int(yy)) + str(int(mm)).zfill(2) + str(int(dd)).zfill(2))
        days = Bf.julday(str(int(yy)) + str(int(mm)).zfill(2) + str(int(dd)).zfill(2)) - Bf.julday('20120101')
        mlat = Bf.dip_lat(lat, lon, hmf2, yy)
        if 18.5 < lct < 23.5 and 200 < hmf2 < 650:
            res['days'].append(days)
            res['lon'].append(lon)
            res['hmf2'].append(hmf2)
            res['doy'].append(doy)
            res['den'].append(den)
            res['lct'].append(lct)
            outtexts.append(text)
    # print(res)
    # # plt.scatter(res['lon'], res['doy'], c=res['den'], s=8, cmap='jet', vmax=2*10**6)
    hmf2_bins = Bf.idw2d(res['lon'], res['doy'], res['hmf2'], -180, 180, 0, 366, 48, 24, mode=3, max_distant=3)
    nmf2_bins = Bf.idw2d(res['lon'], res['doy'], res['den'], -180, 180, 0, 366, 48, 24, mode=3, max_distant=3)

    # print('hmf2')
    # for a in hmf2_bins:
    #     print(a)
    # print('nmf2')
    # for a in nmf2_bins:
    #     print(a)
    plt.pcolor(nmf2_bins, cmap='jet')
    plt.colorbar()
    plt.show()
    plt.pcolor(hmf2_bins, cmap='jet')
    plt.colorbar()
    plt.show()
    plt.hist(res['hmf2'], bins=50)
    plt.show()

    # plt.scatter(res['lct'], res['hmf2'], c=res['den'], s=8, cmap='jet', vmax=2*10**6)
    # plt.show()


def draw_hmf2_champ():
    from fourPic import draw_champ
    plt.figure(figsize=[10, 6])
    plt.subplots_adjust(left=0.05, bottom=0.08, right=1.0, top=0.93, wspace=0.05, hspace=0.34)
    hmf2 = """
             [411.41321574 410.57632983 410.56058406 413.85930467 410.80980334
             409.26305048 411.32020823 417.14505852 422.35331025 429.9860029
             414.6688155  445.89476161 450.65211502 439.28296888 455.47121326
             455.83668777 452.0116635  450.11632448 464.61663457 453.21449241
             414.06680327 402.29874711 396.38668507 392.74866622 393.11872481
             384.76323087 401.60620063 416.4239786  422.24028009 411.80130983
             403.65459398 399.68721702 381.79118681 382.53116586 385.61894803
             392.73587238 386.3228283  392.14115589 390.99348491 386.8623642
             385.82797604 385.15115897 381.44631507 390.38234884 393.92828853
             391.48849958 402.57735578 413.29005645]
            [403.03176597 404.15090305 400.2778079  408.97314931 401.41178201
             400.53944929 408.92141178 417.30804769 415.49335016 415.973392
             415.63521518 440.69472486 446.57840128 450.84764204 445.56226688
             447.43363494 451.07210672 436.09180181 437.17300319 432.27952922
             422.72909502 414.38114112 404.33866673 394.64292643 389.45704756
             386.18713889 385.94278288 405.31332463 417.88348783 410.03966464
             386.56841364 385.02599013 373.47909525 383.24113744 379.92152779
             380.15096198 393.52145926 390.08396474 389.84989851 389.23436353
             386.14414053 378.48434148 379.02262707 377.7621827  377.25681952
             389.25054123 392.0066248  396.33803242]
            [390.73151216 402.5467049  404.36148974 387.35531641 396.25788094
             396.8812197  395.74198429 405.95086648 401.81055894 407.68329293
             420.51180094 433.1006696  440.91797849 450.63841072 457.30294558
             449.99503979 452.84782275 438.4661355  442.95714972 435.35902265
             410.93799381 431.87692357 432.72044874 418.14932201 396.28758894
             396.49535235 377.59928572 407.91290769 403.3549903  419.84290538
             403.69748288 373.11112794 384.12818919 380.16287169 381.0070517
             384.25888929 384.11649215 390.25459541 396.25303753 404.07146458
             396.98819453 387.92963478 389.64904456 391.78445547 369.33999257
             380.53193659 385.23423356 392.79917554]
            [396.15381876 393.97507267 391.45922588 386.92477086 381.60973243
             391.59356209 384.29355135 392.43143311 390.48972089 397.47392613
             409.24997363 423.16958995 442.72362876 450.31102413 461.57370837
             450.71633056 445.97647632 438.90243639 435.99747843 427.05862259
             432.06874003 433.77271424 431.88867151 421.51364747 389.89910395
             396.42734116 380.68666615 387.01566695 396.92572447 400.02063732
             405.86103188 400.73183488 390.82323475 391.27401914 383.89113792
             379.32172616 377.45762569 379.51344313 391.50011034 393.5994783
             412.90884118 390.87203909 379.47655133 376.47141402 398.52738826
             379.39831207 387.45402818 392.125909  ]
            [404.9448053  401.06849841 387.3029599  389.18843117 403.21556856
             390.74625618 386.63095023 382.46789401 388.24841469 389.40201089
             377.41340801 435.86397596 449.98702407 457.83120876 445.24004252
             433.33493084 481.08494804 427.3913777  411.08334832 419.58157923
             420.7390872  437.78545474 436.3204504  429.97271635 419.52393343
             419.00464619 398.75334184 402.48512501 409.34264639 406.93647561
             422.07490251 428.65174454 402.6940244  399.20867844 397.49476877
             399.42172384 359.673117   387.48144117 395.78955064 403.51150789
             402.53010796 403.26416387 392.85163244 400.34184718 384.05908665
             386.38810636 392.05087619 396.70247667]
            [413.94752629 406.84944158 398.67133717 398.94006298 384.61489336
             393.39293525 391.64413436 413.23998538 395.56546798 394.75505299
             414.59810949 427.27800571 459.51981179 462.90953569 424.80613927
             433.0455868  426.12241839 419.53456229 421.79969129 417.93425584
             425.75461757 412.49872222 431.84637512 439.16598868 436.3020092
             417.15456298 450.5849427  414.18599994 411.53798407 436.85190987
             430.17828723 417.48521288 422.56606417 426.46963831 417.25822462
             422.21246204 410.39932751 382.19086598 390.06652299 412.22032762
             409.41732805 406.93333324 391.88378875 401.45730644 393.7267641
             398.57743748 406.01451211 410.85055703]
            [425.63437412 410.88438015 409.82596579 406.8697768  378.53594885
             404.14926587 406.07628758 389.80167953 395.39994809 401.24786597
             417.92727539 421.70576238 424.82580833 429.61378784 436.72533177
             429.21351947 418.25938023 416.84961094 419.95446868 416.00152416
             418.40651705 430.29463583 422.5552704  443.70616305 449.22840918
             439.72358652 429.64371146 416.92222905 433.8001313  446.80637263
             422.70229551 425.22231086 419.69714553 429.77319212 423.10530879
             414.09016716 408.40377485 400.4398499  394.87942719 403.68003178
             412.4793574  417.901067   406.4957049  409.1234135  396.69189888
             406.80137921 413.00455354 434.80096822]
            [413.64838505 400.7048854  402.08257795 399.38680626 397.11827505
             394.73900931 389.24533178 385.50853868 358.19635202 376.75355274
             389.80200654 381.2065804  392.90297776 401.27891566 409.99445176
             400.21782148 420.89457043 373.78035489 400.87792195 408.2575604
             407.99550872 417.67545981 427.28748553 423.94631386 423.10133427
             430.42806958 416.45455084 418.05475701 428.03486091 439.21960646
             410.27735355 414.03719947 401.68890473 412.47226288 401.2022153
             397.68320573 376.73951686 391.26791621 387.33809644 391.43636031
             370.49140659 405.64796024 403.9542351  407.03636504 398.81038125
             400.38129654 404.0060915  414.90053585]
            [403.98502861 402.21343301 395.25762977 391.24035382 399.50216309
             384.95551865 383.18864573 384.91874028 400.02626642 385.59150827
             387.67437249 389.09260883 394.91187395 377.22579243 395.09414619
             401.74533297 409.68733571 412.92233498 407.5497807  401.79240555
             400.53780765 404.8662984  386.41655299 409.82132833 409.37409953
             416.27243902 424.54010865 438.31492099 408.68018361 412.84927152
             392.83912045 380.49524949 371.92563812 371.5362037  367.60506453
             373.54196273 370.57179968 377.93947175 385.12155909 373.67177286
             386.55485688 400.72434627 395.89417413 398.93570306 397.81054
             380.68246641 400.6838557  404.09302664]
            [398.97410415 393.64394508 393.20618459 378.80175729 383.87407891
             371.53194861 366.69804683 368.55680295 373.93905725 382.31410909
             383.82968048 369.30492559 393.12624457 373.15636629 374.21033769
             402.70287101 408.14249967 403.92416913 394.02687327 372.61470514
             388.03105551 392.58775044 387.74900205 383.6914337  386.07410523
             393.90579451 396.93877451 394.67843272 392.23799025 380.33623987
             370.38726034 349.32701094 354.57129045 345.40610348 339.33071675
             351.35914781 354.6549211  356.90344645 353.78627859 364.98494129
             369.43081009 384.02874874 392.82658596 395.15796526 388.02489121
             391.23430625 398.54602872 395.56637319]
            [398.1427406  399.84776977 384.61653083 371.73433791 368.18766902
             345.17244137 370.29766117 363.75468856 378.39738589 380.05446519
             398.62557085 370.68831289 364.11119241 364.19211119 371.43596562
             389.25887504 393.13762019 388.57910582 382.76493117 385.13045582
             380.9551389  383.78018297 385.63741048 378.09627708 385.30437241
             404.16610238 390.80301735 392.44345798 387.5654559  371.94278653
             366.71341177 354.73722865 344.61116114 340.34680713 334.40735924
             342.38344905 350.06702047 355.09139542 360.10679457 363.75052301
             370.11525872 385.44070775 384.86089567 389.56433831 399.36405125
             396.48920792 398.91766291 409.27442819]
            [386.8161813  386.54464254 379.24426047 379.20667629 380.54363619
             363.0214733  364.58399016 372.4336107  363.93976606 376.93024735
             370.83050273 361.35478829 360.80514758 348.98090893 370.62980158
             376.12773198 382.16273277 387.8295888  374.4416545  376.7852816
             382.39626952 382.89674461 384.20355485 375.92285644 386.24819285
             383.44727897 363.77353408 394.69754971 375.43264427 371.07964245
             356.94323889 352.98594517 347.82892537 341.54794469 342.27698711
             342.06332311 340.34242018 346.61647893 351.91914716 355.06747018
             363.50068289 373.19120258 375.06443101 381.6174389  392.34096108
             384.31712794 395.29453301 386.59651019]
            [383.73829259 387.13216922 382.38536129 383.04620689 375.55069963
             377.59361651 373.70837628 383.84648062 383.72756312 392.31956036
             374.70885147 366.41931024 357.34837327 360.93340937 364.51684732
             369.60744118 411.7350973  393.0881479  381.19932113 373.18870128
             386.32678249 386.66621188 390.10832571 391.19725295 388.45158653
             383.36756199 390.3432417  389.06277258 379.19635093 372.41021702
             365.76080814 355.47792025 353.45892158 345.33245236 344.89941404
             341.09631627 345.35009329 351.73350085 350.79119659 361.06785255
             364.78395266 363.3291256  387.24370208 373.6219116  386.23359804
             383.57961066 387.46012126 383.84560429]
            [369.10779211 367.09238252 383.31076728 378.2010394  378.93550048
             377.47234716 367.08429867 384.19971593 390.4430595  388.11119686
             378.48946135 364.82380772 357.00088357 354.5563654  362.85821963
             371.83273977 380.13134055 389.97932357 386.05429124 389.58650636
             386.07607101 388.76606895 388.2466126  392.77949583 386.14054246
             384.89839652 346.73544038 376.49296588 371.70913845 375.1159518
             364.09954242 345.79385326 350.69109375 344.63025053 330.87427419
             346.27929887 342.7787251  346.04513373 343.86765264 351.76115643
             349.51943913 357.36357716 371.13514009 360.38015301 378.1691261
             377.04011044 364.03239577 373.46023567]
            [375.68263732 388.58703388 390.01131523 394.33918489 390.67632974
             381.2272664  388.37996529 396.54231454 399.27939232 393.54660013
             383.30733861 369.4513316  363.71580573 360.99313161 365.448176
             378.82567126 386.15848083 391.05516819 393.73257206 383.69241679
             392.01785311 389.7964769  391.90234893 387.85773487 387.85940448
             383.36046117 375.03614002 380.32280624 380.22262655 379.34342896
             369.81461646 363.56501111 358.13517613 349.07760166 349.53170511
             346.48345377 344.43284333 351.07365905 353.61143061 359.53150407
             362.19488879 363.18306951 364.28640784 366.18164204 372.37127512
             376.71221017 377.3187574  374.15495776]
            [376.68407723 382.74583523 373.92100627 391.81752576 393.09778798
             386.67887101 386.0145515  397.37906944 396.0697386  391.55698772
             383.0659008  368.69776442 352.95331006 365.94880329 365.93037151
             380.94069938 395.36644843 396.92472949 400.13990879 396.11571085
             390.6065048  376.26076482 384.091085   389.76545128 386.74269362
             390.45068763 381.0456344  381.51884066 392.69715865 387.62472692
             389.2429078  371.65441    363.46318399 360.48685281 356.0753772
             350.50054855 345.43234115 355.98186521 356.44051348 381.03138379
             365.09281226 362.06024624 356.78611666 361.83403951 367.20689045
             365.22549008 367.24483425 368.89047642]
            [380.34947962 401.44854483 390.98897077 384.47505652 379.82960446
             387.38024194 398.73172096 402.62246795 406.38964287 386.05292155
             385.00074804 403.6788888  366.3602498  366.82317698 366.92918377
             392.11103232 430.46854015 407.51568389 407.26400214 405.44688143
             387.43967279 382.54435106 384.32917956 397.49798794 411.58774013
             419.35870622 400.36909349 395.46145576 396.19553563 393.65381792
             393.7028077  387.84544545 404.67538539 381.80571071 387.65693518
             352.68224041 345.40263577 353.98949384 357.25698173 376.52800023
             369.81332973 367.23334607 373.4223179  356.23716831 357.56988672
             365.74492455 370.65695154 371.68160883]
            [385.71326066 390.00783676 396.89984943 391.24091122 396.44596733
             396.26522735 409.04452204 411.45743667 403.9056986  404.5203538
             388.43062794 380.01834543 384.86838663 389.10160805 382.47563321
             399.8311647  404.42149738 409.88945738 404.53140636 396.50347018
             388.85349855 383.48756811 385.34362862 404.7246463  411.11863704
             416.91796571 398.50633256 397.31521179 350.75598215 397.06801735
             396.04530389 388.00835944 387.65475547 383.35940157 370.47551993
             373.72365496 344.1254964  352.32608728 349.84349512 358.67796859
             366.98474187 365.38706158 363.44854634 356.90368307 355.79807111
             359.12972073 371.49141034 385.7283463 ]
            [397.75236868 401.88188867 409.87434301 411.14311363 414.0748437
             417.23631409 430.41998992 437.05434333 411.40833185 418.75419502
             395.06673807 405.4346099  416.96925871 411.13778683 379.50172295
             394.42954154 397.03518691 409.87979542 420.1175496  436.42602147
             385.0260282  382.8525519  403.55811293 415.32151609 450.83402615
             423.6096565  416.18044203 400.92862399 395.56255572 395.160553
             406.13346703 390.96725194 397.7673628  389.11981519 341.41823815
             364.14714676 357.45770614 353.91176991 343.8192274  351.40371648
             363.26607829 365.99692375 383.0458089  399.66646756 377.41110865
             378.91955834 383.68171194 395.49268087]
            [401.39571169 419.14215289 417.17656749 411.80502033 417.3947162
             432.44315246 438.72769643 447.04270238 438.02373055 426.87155266
             428.62876937 440.53902763 440.66196389 426.24579997 425.70145424
             412.45302355 415.30357096 422.64689482 427.57896512 412.30288751
             387.01912004 378.70361061 381.7932564  394.35014417 424.61751342
             420.4286595  412.50864084 402.61408544 393.18885165 398.66068245
             398.10496178 399.75562542 413.03967749 406.17785301 407.93870901
             382.23251965 365.44781556 360.1424267  354.3065172  357.70143216
             362.78888622 379.31324012 400.74764563 387.16678268 380.97199551
             391.91048947 396.02151071 409.86990684]
            [404.58805245 403.03866625 405.04149743 414.7164668  422.47338647
             433.44367873 447.17900925 453.12389208 452.71566489 438.73182033
             435.56760111 428.96923615 451.25728466 451.70980965 435.40615043
             436.78447792 445.91000599 465.50307813 459.66739722 424.74632129
             399.75717348 376.09710756 377.69782653 384.74563391 398.64892064
             402.56232691 411.17894794 408.47368429 395.07566551 397.24388281
             408.15083703 412.06643516 419.56466771 418.2293875  404.92267542
             385.06826925 384.36044771 371.22393103 368.66923391 359.73404224
             369.58994272 392.48749621 400.04902522 395.51266171 394.73695325
             388.02937704 390.13785938 402.30058547]
            [421.05427662 407.65115202 404.63513677 410.17576019 410.26395978
             412.43089077 439.14368095 444.69090504 444.29581763 440.83510066
             441.11558255 452.86066886 465.53123237 471.69940987 488.87004001
             441.33277376 461.71235433 473.54958216 475.51769762 433.11819213
             394.8787074  361.02217658 372.30542283 361.7614837  386.54839776
             402.95344606 417.52419974 420.5176842  409.21095157 404.70847076
             408.79606913 415.22322031 416.51526013 424.03367822 407.49775902
             403.53735962 399.4223152  383.01666096 374.93727314 364.94673279
             380.7868115  394.81185239 399.68321355 405.09006538 398.46097692
             394.67225589 400.3340413  403.02339057]
            [398.95256659 403.99161772 402.87246628 400.70429154 403.69445021
             399.54200339 418.12002258 429.78384614 433.02715831 424.96559609
             441.65349733 447.33572445 455.16063557 463.0666198  463.43120174
             461.96948178 465.3608441  471.52313646 467.64830277 446.67218496
             408.75071855 390.39669398 381.88562774 382.73407593 376.08568102
             392.11620211 415.74476769 429.02308066 433.24127384 409.38018655
             401.54422129 408.03199829 405.29756547 411.9312304  405.4607827
             397.18725017 388.25153277 383.94841031 373.12370907 372.18337189
             375.59316501 399.43967717 393.25819277 396.84172085 395.74959647
             392.72729625 402.46050172 395.71527231]
            [403.89552039 407.5393585  403.93153702 371.42962799 397.51067768
             409.55962504 398.23606297 420.10812407 427.26938198 430.91923118
             429.75108602 439.61503778 446.71273676 452.58544838 456.4200814
             466.03421663 467.56126132 464.21004522 458.00037679 437.53864845
             411.81222724 392.43010013 379.91786918 373.91968574 380.08827138
             389.3027211  385.00480684 424.70331375 424.42401309 415.00968678
             391.87835768 389.16995141 373.55440307 376.89321596 394.26015918
             389.61194092 388.57673119 379.468624   376.0629719  369.35139526
             383.15401102 380.25863056 391.3737703  392.43956026 392.60917894
             387.09693299 396.47451773 405.79028312]
            """
    hmf2 = hmf2.replace('[', ' ').replace(']', ' ').split()
    hmf2 = [float(x) for x in hmf2]
    hmf2 = np.reshape(hmf2, [24, 48])
    plt.pcolor(hmf2, cmap='gnuplot2', vmin=320, vmax=460)
    # plt.contour(hmf2, 10, cmap='brg_r', vmin=370, vmax=410)
    plt.colorbar()
    plt.xticks(range(0, 49, 4), range(-180, 181, 30))
    plt.yticks(range(1, 25, 2), range(1, 13))
    plt.axis([0, 48, 0, 24])
    draw_champ()
    plt.show()


season = ['sum', 'spr', 'win']
area = ['Eur', 'Asi', 'Pac', 'Ame']
if __name__ == '__main__':
    # static_d2()
    # static_hmf2('jicarmarca')
    # fit_curve()
    # champ_filter()
    # static_cosmic_hmf2()
    draw_hmf2_champ()
